# frozen_string_literal: true

PublicActivity.enabled = false
# rubocop:disable Rails/Output
# rubocop:disable Metrics/BlockLength

# access roles
# Role.destroy_all
# rubocop:disable Metrics/LineLength
[
  ['user', 'Исполнитель', 'Просмотр информации по исполняемым ролям, участию в процессах, комментирование документов процесса'],
  ['owner', 'Владелец процесса', 'Ведение документов, ролей, приложений, рабочих мест процесса, назначение исполнителей на роли'],
  ['analitic', 'Бизнес-аналитик', 'Ведение списка процессов, документов, ролей, рабочих мест, приложений'],
  ['admin', 'Администратор', 'Ведение списков рабочих мест и приложений, настройка системы'],
  ['author', 'Автор', 'Ведение документов и директив, удаление своих документов'],
  ['keeper', 'Хранитель', 'Отвечает за хранение бумажных оригиналов, изменяет место хранения документа'],
  ['security', 'Администратор доступа', 'Ведение прав пользователей, настройка системы'],
  ['manager', 'Менеджер', 'Управляет пользователями: прикрепляет документы в Обязательное '], ['secretar', 'Секретарь', 'Создает и регистрирует письма']
].each do |name, description, note|
  Role.create!(name: name, description: description, note: note)
end
puts 'access roles created'
# rubocop:enable Metrics/LineLength

# users
# User.destroy_all
user1 = User.create!(displayname: 'Иванов И.И.', username: 'ivanov', email: 'ivanov@example.com', password: 'ivanov',
                     firstname: 'Иван', middlename: 'Иванович', lastname: 'Иванов',
                     office: '101', position: 'Экономист',
                     phone: '+7(342)212-34-56')
user1.roles << Role.find_by(name: :author)
user1.roles << Role.find_by(name: :analitic)
user1.roles << Role.find_by(name: :owner)
user1.roles << Role.find_by(name: :admin)

user2 = User.create(displayname: 'Петров П.П.', username: 'petrov', email: 'petrov@example.com',
                    password: 'petrov', firstname: 'Петр', middlename: 'Петрович', lastname: 'Петров')
user2.roles << Role.find_by(name: :author)

user3 = User.create(displayname: 'Администратор', username: 'admin', email: 'admin@example.com',
                    password: 'admin', firstname: 'Admin', middlename: 'Adminович', lastname: 'Adminов')
user3.roles << Role.find_by(name: :admin)
user3.roles << Role.find_by(name: :security)

user4 = User.create(displayname: 'Сидоров С.С.', username: 'sidorov', email: 'sidorov@example.com',
                    password: 'sidorov', firstname: 'Сидор', middlename: 'Сидорович', lastname: 'Сидоров')
user4.roles << Role.find_by(name: :author)

user5 = User.create(displayname: 'Путин В.В.', username: 'putinx',
                    email: 'putinx@example.com', password: 'putinx', department: 'Библиотека',
                    position: 'Юрист', office: '201', phone: '2201')
user5.roles << Role.find_by(name: :keeper)
user5.roles << Role.find_by(name: :user)

user6 = User.create(displayname: 'Кудрин А.В.', username: 'kudrin',
                    email: 'kudrin@example.com', password: 'kudrin', position: 'Финансист')
user6.roles << Role.find_by(name: :author)
user6.roles << Role.find_by(name: :owner)
user6.roles << Role.find_by(name: :analitic)
user6.roles << Role.find_by(name: :security)

user7 = User.create(displayname: 'Яровая И.Й.', username: 'shapoklyak', email: 'shapoklyak@example.com',
                    password: 'shapoklyak', phone: '8-800-0001234', position: 'старший менеджер')
user7.roles << Role.find_by(name: :secretar)
user7.roles << Role.find_by(name: :author)

u = User.create(email: 'robb@bankperm.ru',
                firstname: 'Роберт',
                lastname: 'Бикмансуров',
                middlename: 'Мулланурович',
                username: 'mr_rob',
                displayname: 'Бикмансуров Р.М.',
                password: 'password',
                department: 'управление информационных технологий',
                position: 'начальник управления',
                office: '401',
                phone: Faker::PhoneNumber.cell_phone,
                active: true)
u.roles << Role.find_by(name: :user)
u.roles << Role.find_by(name: :secretar)
u.roles << Role.find_by(name: :author)
u.roles << Role.find_by(name: :owner)
u.roles << Role.find_by(name: :analitic)
u.roles << Role.find_by(name: :security)
u.roles << Role.find_by(name: :admin)

60.times do |_n|
  name = Faker::Name.name + ' ' + Faker::Name.name
  names = name.split
  u = User.create(email: Faker::Internet.email,
                  firstname: names[0],
                  lastname: names[2],
                  middlename: names[1],
                  username: Faker::Internet.user_name,
                  displayname: "#{names[2]} #{names[0][0]}.#{names[1][0]}.",
                  password: 'password',
                  #   department: nil,
                  position: Faker::Company.profession,
                  office: rand(100..119),
                  phone: Faker::PhoneNumber.cell_phone,
                  active: true)
  u.roles << Role.find_by(name: :user)
  u.roles << Role.find_by(name: :secretar) if rand(10) == 5
  u.roles << Role.find_by(name: :author) if rand(8) == 3
  u.roles << Role.find_by(name: :owner) if rand(10) == 5
  u.roles << Role.find_by(name: :analitic) if rand(10) == 5
  u.roles << Role.find_by(name: :security) if rand(10) == 5
  u.roles << Role.find_by(name: :admin) if rand(20) == 5
end
puts 'users created'

# workplaces
Workplace.create(name: 'РМ УИТ Начальник', description: 'начальник УИТ', designation: 'РМУИТНачальник', location: '100')
Workplace.create(name: 'Главный бухгалтер', description: 'Главный бухгалтер', designation: 'РМГлБухгалтер', location: '200')
%w[Кассир Бухгалтер Контролер Юрист Экономист].each do |name|
  3.times do |n|
    n += 1
    Workplace.create(
      name: 'РМ ' + name + n.to_s,
      description: 'рабочее место' + name + n.to_s,
      designation: name + n.to_s,
      location: n.to_s + '01'
    )
  end
end
60.times do |_n|
  wp = Workplace.find(Workplace.pluck(:id).sample)
  wp.user_workplace.create(
    user_id: User.pluck(:id).sample,
    date_from: Faker::Date.backward(120),
    date_to: Faker::Date.forward(120),
    note: ''
  )
end
puts 'workplaces created'

# terms
# rubocop:disable Metrics/LineLength
# Term.destroy_all
[
  ['АРМ', 'Автоматизированное рабочее место', 'Программный или программно-технический комплекс, предназначенный для автоматизации деятельности определенного вида', ''],
  ['ГВ', 'Гипервизор', 'ПО, обеспечивающее возможность запуска нескольких ОС на одной ЭВМ.', ''],
  ['ОС', 'Операционная система', 'совокупность системных программ, предназначенная для обеспечения определённого уровня эффективности системы обработки информации за счёт автоматизированного управления её работой и предоставляемого пользователю определённого набора услуг', ''],
  ['СИБ', 'Система информационной безопасности', 'Совокупность защитных мер, реализующих обеспечение информационной безопасности, и процессов их эксплуатации, включая ресурсное и административное (организационное) обеспечение', ''],
  ['СМИБ', 'Система менеджмента информационной безопасности', 'Совокупность процессов менеджмента информационной безопасности, включая ресурсное и административное (организационное) обеспечение этих процессов', ''],
  ['СОИБ', 'Система обеспечения информационной безопасности', 'Совокупность системы информационной безопасности и системы менеджмента информационной безопасности', ''],
  ['ИБ', 'Информационная безопасность', 'Состояние защищенности интересов организации в условиях угроз в информационной сфере', ''],
  ['АБС', 'Автоматизированная банковская система', 'Автоматизированная система, реализующая технологию выполнения функций банка', ''],
  ['АС', 'Автоматизированная система', 'Система, состоящая из персонала и комплекса средств автоматизации его деятельности, реализующая информационную технологию выполнения установленных функций', ''],
  ['БД', 'База данных', 'Совокупность взаимосвязанных данных, организованных в соответствии со схемой базы данных таким образом, чтобы с ними мог работать пользователь', ''],
  ['БИТП', 'Банковский информационный технологический процесс', 'Часть банковского технологического процесса, реализующая операции по изменению и (или) определению состояния информационных активов, необходимых для функционирования банка и не являющихся платежной информацией', ''],
  ['БПТП', 'Банковский платежный технологический процесс', 'Часть банковского технологического процесса, реализующая банковские операции над информационными активами банка, связанные с перемещением денежных средств с одного счета на другой и (или) контролем данных операций', ''],
  ['БТП', 'Банковский технологический процесс', 'Технологический процесс, реализующий операции по изменению и (или) определению состояния активов банка, используемых при функционировании или необходимых для реализации банковских услуг', ''],
  ['ДБО', 'Дистанционное банковское обслуживание', 'Технологии предоставления банковских услуг на основании распоряжений, передаваемых клиентом удаленным образом, с использованием компьютерных и телефонных сетей', ''],
  ['ЖЦ', 'Жизненный цикл', 'Период времени, который начинается с момента принятия решения о необходимости создания программного продукта и заканчивается в момент его полного изъятия из эксплуатации', ''],
  ['ИС', 'Информационная система', 'Совокупность содержащихся в базах данных информации и информационных технологий, а также технических средств, обеспечивающих ее обработку', ''],
  ['ИСПДн', 'Информационная система персональных данных', 'Совокупность содержащихся в базах данных персональных данных и обеспечивающих их обработку информационных технологий и технических средств', ''],
  ['ИТ', 'Информационные технологии', 'Процессы, методы поиска, сбора, хранения, обработки, предоставления, распространения информации и способы осуществления таких процессов и методов', ''],
  ['МЭ', 'Межсетевой экран', 'Локальное (однокомпонентное) или функционально-распределенное программное (программно-аппаратное) средство (комплекс), реализующее контроль за информацией, поступающей в ИС и (или) выходящей из нее', ''],
  ['Идентификация', 'Идентификация', 'Процесс присвоения идентификатора (уникального имени); сравнение предъявляемого идентификатора с перечнем присвоенных идентификаторов', ''],
  ['НСД', 'Несанкционированный доступ', 'Доступ к информации или к ресурсам автоматизированной информационной системы, осуществляемый с нарушением установленных прав и (или) правил доступа', ''],
  ['ПДн', 'Персональные данные', 'Любая информация, относящаяся к прямо или косвенно определенному или определяемому физическому лицу (субъекту персональных данных)', ''],
  ['ПО', 'Программное обеспечение', 'Совокупность программ системы обработки информации и программных документов, необходимых для эксплуатации этих программ', ''],
  ['СВТ', 'Средства вычислительной техники', 'Совокупность программных и технических элементов систем обработки данных, способных функционировать самостоятельно или в составе других систем', ''],
  ['СЗИ', 'Средство защиты информации', 'Техническое, программное, программно-техническое средство, вещество и (или) материал, предназначенные или используемые для защиты информации', ''],
  ['СКЗИ', 'Средство криптографической защиты информации', 'Средство вычислительной техники, осуществляющее криптографическое преобразование информации для обеспечения ее безопасности', ''],
  ['СУБД', 'Система управления базами данных', 'Совокупность программных и языковых средств, обеспечивающих управление базами данных', ''],
  ['ТП', 'Технологический процесс', 'Процесс, реализующий некоторую технологию', ''],
  ['ЭВМ', 'Электронная вычислительная машина', 'Совокупность технических средств, основные функциональные устройства которых выполнены на электронных компонентах, создающая возможность проведения обработки информации и получения результата в необходимой форме', ''],
  ['Информация', 'Информация', 'Сведения (сообщения, данные) независимо от формы их представления', ''],
  ['Процесс', 'Процесс', 'Совокупность взаимосвязанных ресурсов и деятельности, преобразующая входы в выходы', ''],
  ['Технология', 'Технология', 'Совокупность взаимосвязанных методов, способов, приемов предметной деятельности', ''],
  ['Роль', 'Роль', 'Заранее определенная совокупность правил, устанавливающих допустимое взаимодействие между субъектом и объектом', ''],
  ['Угроза', 'Угроза', 'Опасность, предполагающая возможность потерь (ущерба)', ''],
  ['Риск', 'Риск', 'Мера, учитывающая вероятность реализации угрозы и величину потерь (ущерба) от реализации этой угрозы', ''],
  ['Актив', 'Актив', 'Все, что имеет ценность для банка и находится в его распоряжении', ''],
  ['ИА', 'Информационный актив', "Информация с реквизитами, позволяющими ее идентифицировать; имеющая ценность для банка;\r\nнаходящаяся в его распоряжении и представленная на любом материальном носителе в пригодной для ее обработки, хранения или передачи форме", ''],
  ['ОСИА', 'Объект среды информационного актива', 'Материальный объект среды использования и (или) эксплуатации информационного актива (объект хранения, передачи, обработки, уничтожения и т.д.)', ''],
  ['Ресурс', 'Ресурс', 'Актив, который используется или потребляется в процессе выполнения некоторой деятельности', ''],
  ['Доступность', 'Доступность информационных активов', 'Свойство информационных активов предоставлять доступ к ним в определенном виде, месте и время, необходимые авторизованному субъекту', ''],
  ['Целостность', 'Целостность информационных активов', 'Свойство информационных активов сохранять свою неизменность или исправлять обнаруженные изменения', ''],
  ['Конфиденциальность', 'Конфиденциальность информационных активов', 'Свойство информационных активов подвергаться обработке только авторизованными субъектами (пользователями, системами, процессами)', ''],
  ['Авторизация', 'Авторизация', 'Предоставление прав доступа', ''],
  ['Аутентификация', 'Аутентификация', 'Проверка принадлежности субъекту доступа предъявленного им идентификатора (подтверждение подлинности)', ''],
  ['Угроза ИБ', 'Угроза информационной безопасности', 'Угроза нарушения свойств информационной безопасности — доступности, целостности или конфиденциальности информационных активов', ''],
  ['Уязвимость ИБ', 'Уязвимость информационной безопасности', 'Слабое место в инфраструктуре, включая систему обеспечения информационной безопасности, которое может быть использовано для реализации или способствовать реализации угрозы информационной безопасности', ''],
  ['Инцидент ИБ', 'Инцидент информационной безопасности', 'Событие, указывающее на свершившуюся, предпринимаемую или вероятную реализацию угрозы информационной безопасности', ''],
  ['Риск нарушения ИБ', 'Риск нарушения информационной безопасности', 'Риск, связанный с угрозой информационной безопасности', ''],
  ['Оценка риска ИБ', 'Оценка риска нарушения информационной безопасности', 'Систематический и документированный процесс выявления, сбора, использования и анализа информации, позволяющей провести оценивание рисков нарушения информационной безопасности, связанных с использованием информационных активов на всех стадиях их жизненного цикла', ''],
  ['Допустимый риск ИБ', 'Допустимый риск нарушения ИБ', 'Риск нарушения информационной безопасности, предполагаемый ущерб от которого в данное время и в данной ситуации может быть принят', ''],
  ['ЭП', 'Электронная подпись', 'Электронная цифровая подпись (ЭЦП) — реквизит электронного документа, полученный в результате криптографического преобразования информации с использованием закрытого ключа подписи и позволяющий установить отсутствие искажения информации в электронном документе с момента формирования подписи и проверить принадлежность подписи владельцу сертификата ключа подписи.', "Старое определение:\r\nИнформация в электронной форме, которая присоединена к другой информации в электронной форме (подписываемой информации) или иным образом связана с такой информацией и которая используется для определения лица, подписывающего информацию.\r\n"]
].each do |name, shortname, description, source|
  Term.create(name: name, shortname: shortname, description: description, source: source)
end
puts 'terms created'
# rubocop:enable Metrics/LineLength

# processes
bp1 = Bproce.create!(name: 'Предоставление сервисов', shortname: 'B.4.1', fullname: 'Предоставление сервисов',
                     user_id: user1.id, parent_id: nil)

Bproce.create!(name: 'Управление уровнем сервисов', shortname: 'SLM', fullname: 'Управление уровнем сервисов',
               user_id: User.pluck(:id).sample, parent_id: bp1.id)
Bproce.create!(name: 'Управление мощностями', shortname: 'CAP', fullname: 'Управление мощностями',
               user_id: User.pluck(:id).sample, parent_id: bp1.id)
Bproce.create!(name: 'Управление непрерывностью', shortname: 'SCM', fullname: 'Управление непрерывностью',
               user_id: User.pluck(:id).sample, parent_id: bp1.id)
bp14 = Bproce.create(name: 'Управление финансами', shortname: 'FIN', fullname: 'Управление финансами',
                     user_id: User.pluck(:id).sample, parent_id: bp1.id)
bp14.user_id = user1.id
bp14.save
bp14.business_roles.create(name: 'НачальникИТ', description: 'Контролирует счета, готовит План закупок')
br1 = bp14.business_roles.create!(name: 'Бухгалтер', description: 'Оплачивает счет, учитывает бухгалтерские документы',
                                  features: 'Нужен калькулятор')
ubr1 = br1.user_business_role.create!(date_from: '2015-01-11', date_to: '2015-12-31', note: 'исп.обязанности',
                                      user_id: user1.id)
ubr1.save
Bproce.create!(name: 'Управление доступностью', shortname: 'AVA', fullname: 'Управление доступностью',
               user_id: User.pluck(:id).sample, parent_id: bp1.id)

bp2 = Bproce.create!(name: 'Поддержка сервисов', shortname: 'B.4.2', fullname: 'Поддержка сервисов',
                     parent_id: nil, user_id: user1.id)
bp21 = Bproce.create!(name: 'Управление инцидентами', shortname: 'INC', fullname: 'Управление инцидентами',
                      user_id: User.pluck(:id).sample, parent_id: bp2.id)
bp211 = Bproce.create!(name: 'Служба поддержки пользователей Service Desk', shortname: 'SD',
                       fullname: 'Служба поддержки пользователей Service Desk', user_id: User.pluck(:id).sample,
                       parent_id: bp21.id)
Bproce.create!(name: 'Управление проблемами', shortname: 'PRB', fullname: 'Управление проблемами',
               user_id: User.pluck(:id).sample, parent_id: bp2.id)
Bproce.create!(name: 'Управление конфигурациями', shortname: 'CFG', fullname: 'Управление конфигурациями',
               user_id: User.pluck(:id).sample, parent_id: bp2.id)
Bproce.create!(name: 'Управление релизами', shortname: 'REL', fullname: 'Управление релизами',
               user_id: User.pluck(:id).sample, parent_id: bp2.id)
Bproce.create!(name: 'Управление изменениями', shortname: 'CNG', fullname: 'Управление изменениями',
               parent_id: bp2.id, user_id: user6.id)

puts 'processes created'

# iresource
Array.new(50) do |_i|
  url = Faker::Internet.url.sub 'http:', ['//srv', '//s', 'aws:', 'https:', 'ftp:'][rand(5)]
  label = Faker::Lorem.words(6).join(' ')[0, 20]
  label = Faker::Lorem.words(6).join(' ')[0, 20] if Iresource.where(label: label).any?
  Iresource.create!(
    level: %w[FS DB SPR API local][rand(5)],
    label: label,
    location: url,
    alocation: Faker::Internet.url,
    volume: rand(0..3),
    note: Faker::Lorem.sentence,
    access_read: %w[group1 gr_auto gr_devel gr_test gr_prod][rand(5)],
    access_write: ['group1', 'gr_auto', 'gr_devel', 'gr_test', ''][rand(5)],
    access_other: ['group1', 'gr_auto', 'gr_devel', 'gr_test', ''][rand(5)],
    risk_category: %w[В КВ Н НВ ОВ][rand(5)],
    user_id: User.pluck(:id).sample
  )
  BproceIresource.create(bproce_id: Bproce.pluck(:id).sample, iresource_id: Iresource.last.id)
  if rand(20) == 1
    BproceIresource.create(bproce_id: Bproce.pluck(:id).sample, iresource_id: Iresource.last.id,
                           rpurpose: Faker::Lorem.sentence(1))
  end
end
puts 'iresources created'

# agents
Array.new(75) do |_i|
  company_name = Faker::Company.name
  Agent.create!(name: "#{Faker::Company.suffix} #{company_name}",
                shortname: company_name[0, 30],
                town: Faker::Address.city[0, 30],
                address: Faker::Address.street_address,
                contacts: Faker::PhoneNumber.cell_phone,
                note: Faker::Lorem.sentence)
end
puts 'agents created'

# contracts
Array.new(150) do |_i|
  status = 'Действует'
  status = 'НеДействует' if rand(20) == 1
  status = 'Согласование' if rand(20) == 1
  date = Faker::Date.backward(rand(400)) # date_begin
  date_end = Faker::Date.forward(rand(400)) if status == 'НеДействует'
  date_end = Faker::Date.forward(rand(400)) if status == 'Действует' && rand(2) == 1
  payer_id = nil
  payer_id = User.pluck(:id).sample unless rand(5) == 1
  place = "ST#{rand(10)}"
  note = Faker::Lorem.sentence if rand(5) == 1
  condition = Faker::Lorem.sentence if rand(10) == 1
  check = Faker::Lorem.sentence if rand(10) == 1
  Contract.create!(
    contract_type: %w[Договор Соглашение Контракт][rand(3)],
    number: rand(99..9999),
    name: Faker::Lorem.sentence,
    status: status,
    date_begin: date,
    date_end: date_end,
    text: Faker::Lorem.sentence,
    description: Faker::Lorem.paragraph[0, 255],
    note: note,
    condition: condition,
    check: check,
    owner_id: User.pluck(:id).sample,
    agent_id: Agent.pluck(:id).sample,
    contract_place: place,
    payer_id: payer_id
  )
  contract = Contract.last
  contract_id = contract&.id || 1
  BproceContract.create(bproce_id: Bproce.pluck(:id).sample, contract_id: contract_id)
  if rand(20) == 1
    BproceContract.create(bproce_id: Bproce.pluck(:id).sample, contract_id: contract_id,
                          purpose: Faker::Lorem.sentence(1))
  end
end
puts 'contracts created'

Metric.create(name: 'ИнцидентовВсего', description: 'количество инцидентов, зарегистрированных в системе',
              depth: '3', bproce_id: bp211.id)
puts 'metrics created'

# directives
# rubocop:disable Metrics/LineLength
# rubocop:disable Metrics/ParameterLists
[
  ['Указание', '3659-У', '04 Jun 2015', "Указание Банка России от 04.06.2015 N 3659-У\r\n\"О внесении изменений в Положение Банка России от 16 июля 2012 года N 385-П \"О правилах ведения бухгалтерского учета в кредитных организациях, расположенных на территории Российской Федерации\"\r\n\r\n", '', 'Банк России', '', 'Действует', ''],
  ['Положение', '408-П', '25 Oct 2013', "Положение о порядке оценки соответствия квалификационным требованиям и требованиям к деловой репутации лиц, указанных в статье 11.1 Федерального закона \"О банках и банковской деятельности\" и статье 60 Федерального закона \"О Центральном банке Российской Федерации (Банке России)\", и порядке ведения базы данных, предусмотренной статьей 75 Федерального закона \"О Центральном банке Российской Федерации (Банке России)\r\n", '', 'ЦБ РФ', '', 'Действует', ''],
  ['Письмо', '98-Т', '29 May 2014', "О порядке применения Положения Банка России от 25 октября 2013 года N 408-П\r\n", '', 'ЦБ РФ', '', 'Действует', ''],
  ['Указание', '3639-У', '19 May 2015', "О порядке раскрытия кредитной организацией информации о квалификации и опыте работы членов совета директоров (наблюдательного совета) кредитной организации, лиц, занимающих должности единоличного исполнительного органа, его заместителей, членов коллегиального исполнительного органа, главного бухгалтера, заместителя главного бухгалтера кредитной организации, а также руководителя, главного бухгалтера филиала кредитной организации, на официальном сайте кредитной организации в информационно-телекоммуникационной сети \"Интернет\"\r\n(вместе с \"Информацией о квалификации и опыте работы члена совета директоров (наблюдательного совета) кредитной организации\", \"Информацией о квалификации и опыте работы лица, занимающего должность единоличного исполнительного органа, его заместителя, члена коллегиального исполнительного органа, главного бухгалтера, заместителя главного бухгалтера кредитной организации, а также руководителя, главного бухгалтера филиала кредитной организации\r\n", '', 'ЦБ РФ', '', 'Действует', ''],
  ['ФЗ', '174-ФЗ', '18 Dec 2001', "Уголовно-процессуальный кодекс Российской Федерации\r\n", '', 'РФ', '', 'Действует', ''],
  ['ФЗ', '173-ФЗ', '10 Dec 2003', "О валютном регулировании и валютном контроле\r\n", '', 'РФ', '', 'Действует', ''],
  ['Постановление', '272', '15 Apr 2011', "Об утверждении Правил перевозок грузов автомобильным транспортом\r\n", '', 'Правительство РФ', '', 'Действует', ''],
  ['ФЗ', '196-ФЗ', '10 Dec 1995', "О безопасности дорожного движения\r\n", '', 'РФ', '', 'Действует', ''],
  ['ФЗ', '294-ФЗ', '26 Dec 2008', "О защите прав юридических лиц и индивидуальных предпринимателей при осуществлении государственного контроля (надзора) и муниципального контроля\r\n", '', 'РФ', '', 'Действует', ''],
  ['ФЗ', '209-ФЗ', '24 Jul 2007', "О развитии малого и среднего предпринимательства в Российской Федерации\r\n", '', 'РФ', '', 'Действует', ''],
  ['Положение', '446-П', '22 Dec 2014', 'О порядке определения доходов, расходов и прочего совокупного дохода кредитных организаций', '', 'ЦБ РФ', "Вносит существенные изменения в бухгалтерский учет доходов расходов\r\nс 01.01.2016 новые счета доходов и расходов, новые символы кассплана\r\nПринцип начисления не изменяется", 'Действует', ''],
  ['ФЗ', '7-ФЗ', '10 Jan 2002', "Об охране окружающей среды\r\n", '', 'РФ', '', 'Действует', ''],
  ['Федеральный закон', '210-ФЗ', '29 Jun 2015', 'О внесении изменений  в отдельные законодательные акты РФ и признании утратившими силу отдельных положений законодательных актов РФ', '', 'Государственная дума', '', 'Действует', ''],
  ['ФЗ', '16-ФЗ', '09 Feb 2007', "О транспортной безопасности\r\n", '', 'РФ', '', 'Действует', ''],
  ['Письмо', '41-2-11/551', '24 Apr 2015', "Ответ Департамента банковского регулирования Банка России по применению Положения 242-П.\r\n", '', 'Банк России', " Кредитная организация может не назначать на период временного отсутствия руководителя службы внутреннего аудита/руководителя службы внутреннего контроля замещающее его лицо при условии, что такое замещение осуществляется не более двух месяцев и не является препятствием для эффективной и постоянной деятельности службы внутреннего аудита/службы внутреннего контроля, в том числе для выполнения соответствующего плана проведения проверок службы внутреннего аудита/плана деятельности службы внутреннего контроля.\r\nПри более длительном отсутствии руководителя службы внутреннего аудита/руководителя службы внутреннего контроля замещающее его лицо, по нашему мнению, должно быть назначено. При этом такое лицо в течение всего периода исполнения обязанностей соответствующего руководителя должно удовлетворять квалификационным требованиям, установленным Указанием N 3223-У, и требованиям к деловой репутации, предусмотренным пунктом 1 части 1 статьи 16 Закона о банках.\r\n", 'Действует', ''],
  ['ФЗ', '52-ФЗ', '30 Mar 1999', "О санитарно-эпидемиологическом благополучии населения\r\n", '', 'РФ', '', 'Действует', ''],
  ['ФЗ', '89-ФЗ', '24 Jun 1998', "Об отходах производства и потребления\r\n", '', 'РФ', '', 'Действует', ''],
  ['ФЗ', '44-ФЗ', '05 Apr 2013', "О контрактной системе в сфере закупок товаров, работ, услуг для обеспечения государственных и муниципальных нужд\r\n", '', 'РФ', '', 'Действует', ''],
  ['ФЗ', '223-ФЗ', '18 Jul 2011', "О закупках товаров, работ, услуг отдельными видами юридических лиц\r\n", '', 'РФ', '', 'Действует', ''],
  ['Федеральный закон', '140-ФЗ', '08 Jun 2015', 'О добровольном декларировании физическими лицами активов и счетов (вкладов) в банках и о внесении изменений в отдельные законодательные акты РФ', '', 'Государственная дума', '', 'Действует', ''],
  ['Федеральный закон', '159-ФЗ', '29 Jun 2015', 'О внесении изменений в Федеральный закон "О государственном оборонном заказе" и отвельные законодательные акты РФ', 'Вступает в силу с 01.07.2015', 'Государственная дума', '', 'Действует', ''],
  ['Инструкция', '138-И', '04 Jun 2012', " 04.06.2012\r\nО порядке представления резидентами и нерезидентами уполномоченным банкам документов и информации, связанных с проведением валютных операций, порядке оформления паспортов сделок, а также порядке учета уполномоченными банками валютных операций и контроля за их проведением\r\n", '', 'ЦБ РФ', '', 'Действует', ''],
  ['Положение', '262-П', '19 Aug 2004', "Положение об идентификации кредитными организациями клиентов и выгодоприобретателей в целях противодействия легализации (отмыванию) доходов, полученных преступным путем, и финансированию терроризма\r\n", '', 'ЦБ РФ', '', 'НеДействует', ''],
  ['ФЗ', '152-ФЗ', '27 Jul 2007', 'О персональных данных', '', 'РФ', '', 'Действует', ''],
  ['Постановление', '1119', '01 Nov 2012', 'Об утверждении требований к защите персональных данных при их обработке в информационных системах персональных данных', '', 'Правительство РФ', '', 'Действует', ''],
  ['Приказ', '21', '18 Feb 2013', 'Об утверждении состава и содержания организационных и технических мер по обеспечению безопасности персональных данных при их обработке в информационных системах персональных данных', '', 'ФСТЭК РФ', '', 'Действует', ''],
  ['Приказ', '378', '10 Jul 2014', 'Об утверждении состава и содержания организационных и технических мер по обеспечению безопасности персональных данных при их обработке в информационных системах персональных данных с использованием средств криптографической защиты информации, необходимых для выполнения установленных Правительством Российской Федерации требований к защите персональных данных для каждого из уровней защищенности', '', 'ФСБ РФ', '', '', ''],
  ['Гражданский кодекс (часть первая)', '51-ФЗ', '30 Nov 1994', 'Гражданский кодекс (часть первая)', '', 'РФ', '', 'Действует', ''],
  ['Гражданский кодекс (часть вторая)', '14-ФЗ', '26 Jan 1996', 'Гражданский кодекс (часть вторая)', '', 'РФ', '', 'Действует', ''],
  ['Постановление', '512', '06 Jun 2008', 'Об утверждении требований к материальным носителям биометрических персональных данных и технологиям хранения таких данных вне информационных систем персональных данных', '', 'Правительство РФ', '', 'Действует', ''],
  ['Рекомендации', '2.7-2015', '01 May 2015', 'Обеспечение информационной безопасности организаций банковской системы Российской Федерации. Ресурсное обеспечение информационной безопасности', '', 'Банк России', '', 'Действует', ''],
  ['Рекомендации', '2.8-2015', '01 May 2015', 'Обеспечение информационной безопасности организаций банковской системы Российской Федерации. Обеспечение информационной безопасности при использовании технологии виртуализации', '', 'Банк России', '', 'Действует', ''],
  ['Положение', '409-п', '25 Nov 2013', "Положение о порядке бухгалтерского учета отложенных налоговых обязательств и отложенных налоговых активов\r\n", '', 'ЦБ РФ', '', 'Действует', ''],
  ['Письмо', '257-т', '26 Dec 2013', "О Методических рекомендациях \"О порядке бухгалтерского учета отложенных налоговых обязательств и отложенных налоговых активов\r\n", '', 'ЦБ РФ', '', 'Действует', ''],
  ['Письмо', '50-т', '28 Mar 2014', "Об особенностях отражения кредитными организациями в бухгалтерском учете отложенных налоговых обязательств и отложенных налоговых активов\r\n", '', 'ЦБ РФ', '', 'Действует', ''],
  ['Налоговый кодекс частья первая', '146-ФЗ', '31 Jul 1998', 'Налоговый кодекс (часть первая)', '', 'РФ', '', 'Действует', ''],
  ['Постановление', '749', '13 Oct 2008', "Об особенностях направления работников в служебные командировки\r\n", '', 'Правительство РФ', '', 'Действует', ''],
  ['ФЗ', '212-ФЗ', '24 Jul 2009', "О страховых взносах в Пенсионный фонд Российской Федерации, Фонд социального страхования Российской Федерации, Федеральный фонд обязательного медицинского страхования\r\n", '', 'РФ', '', 'Действует', ''],
  ['Приказ', '322', '12 Aug 2012', "Об установлении форм электронных проездных документов (билетов) на железнодорожном транспорте\r\n", '', 'Минтранс РФ', '', 'Действует', ''],
  ['Приказ', '15', '20 Aug 2004', "Об утверждении Положения об особенностях режима рабочего времени и времени отдыха водителей автомобилей\r\n", '', 'Минтранс РФ', '', 'Действует', ''],
  ['Приказ', '7', '15 Jan 2014', "Об утверждении Правил обеспечения безопасности перевозок пассажиров и грузов автомобильным транспортом и городским наземным электрическим транспортом и Перечня мероприятий по подготовке работников юридических лиц и индивидуальных предпринимателей, осуществляющих перевозки автомобильным транспортом и городским наземным электрическим транспортом, к безопасной работе и транспортных средств к безопасной эксплуатации\r\n", '', 'Минтранс РФ', '', 'Действует', ''],
  ['Приказ', '152', '18 Sep 2008', "Об утверждении обязательных реквизитов и порядка заполнения путевых листов\r\n", '', 'Минтранс РФ', '', 'Действует', ''],
  ['Постановление', '112', '14 Feb 2009', "Об утверждении Правил перевозок пассажиров и багажа автомобильным транспортом и городским наземным электрическим транспортом\r\n", '', 'Правительство РФ', '', 'Действует', ''],
  ['Приказ', '179', '04 Jul 2011', "Об утверждении Порядка выдачи специального разрешения на движение по автомобильным дорогам транспортного средства, осуществляющего перевозку опасных грузов\r\n", '', 'Минтранс РФ', '', 'Действует', ''],
  ['ФЗ', '259-ФЗ', '08 Nov 2007', "Устав автомобильного транспорта и городского наземного электрического транспорта\r\n", '', 'РФ', '', 'Действует', ''],
  ['ФЗ', '67-ФЗ', '14 Jun 2012', "Об обязательном страховании гражданской ответственности перевозчика за причинение вреда жизни, здоровью, имуществу пассажиров и о порядке возмещения такого вреда, причиненного при перевозках пассажиров метрополитеном\r\n", '', 'РФ', '', 'Действует', ''],
  ['Постановление', '1090', '23 Oct 1993', "О Правилах дорожного движения\r\n", '', 'Правительство РФ', '', 'Действует', ''],
  ['Приказ', '106н', '18 Jul 2012', 'О введении в действие и прекращении действия документов Международных стандартов финансовой отчетности на территории Российской Федерации', "Начало действия документа - 26.08.2012.\r\n", 'Минфин России', '', 'НеДействует', '']
].each do |title, number, approval, name, note, body, annotation, status, action|
  Directive.create(title: title, number: number, approval: approval, name: name, note: note, body: body, annotation: annotation, status: status, action: action)
end
puts 'Directives created'
# rubocop:enable Metrics/LineLength
# rubocop:enable Metrics/ParameterLists

# documents
Array.new(100) do |_i|
  status = 'Утвержден'
  status = 'НеДействует' if rand(20) == 1
  status = 'Проект' if rand(30) == 1
  status = 'Согласование' if rand(30) == 1
  approved = nil
  approveorgan = ''
  if %w[НеДействует Утвержден].include?(status)
    approved = Faker::Date.backward(rand(400))
    approveorgan = ['Председатель Правления', 'Генеральный директор', 'Правление', 'Совет Директоров', 'Общее собрание'][rand(5)]
  end
  note = Faker::Lorem.sentence if rand(5) == 1
  Document.create!(
    name: Faker::Lorem.sentence,
    description: Faker::Lorem.sentence,
    status: status,
    owner_id: User.pluck(:id).sample,
    responsible: User.pluck(:id).sample,
    dlevel: rand(1..4),
    note: note,
    bproce_id: Bproce.pluck(:id).sample,
    approved: approved,
    approveorgan: approveorgan,
    place: "Папка#{rand(10)}"
  )
  next unless Document.last

  document_id = Document.last&.id
  directive_id = Directive.pluck(:id).sample
  unless DocumentDirective.where(document_id: document_id).where(directive_id: directive_id).any?
    DocumentDirective.create!(
      directive_id: directive_id,
      document_id: document_id
    )
  end
  directive_id = Directive.pluck(:id).sample
  unless DocumentDirective.where(document_id: document_id).where(directive_id: directive_id).any?
    DocumentDirective.create!(directive_id: directive_id, document_id: document_id, note: Faker::Lorem.sentence(1)) if rand(20) == 1
  end
  BproceDocument.create!(bproce_id: Bproce.pluck(:id).sample, document_id: document_id)
  # rubocop:disable Metrics/LineLength
  BproceDocument.create!(bproce_id: Bproce.pluck(:id).sample, document_id: document_id, purpose: Faker::Lorem.sentence(1)) if rand(20) == 1
  # rubocop:enable Metrics/LineLength
end
puts 'documents created'

def create_user_letter(letter_id, user_id = nil)
  user_id ||= User.pluck(:id).sample
  UserLetter.create(
    user_id: user_id,
    letter_id: letter_id,
    status: rand(2)
  )
end

# Letter.destroy_all
sender = "#{Faker::Company.suffix} #{Faker::Company.name}" # first sender
Array.new(300) do |_l|
  number = rand(9..9909).to_s
  number += "-#{rand(33)}" if rand(5) == 1
  number += "-#{rand(33)}" if rand(5) == 1
  number += "/#{rand(20)}" if rand(6) == 1
  date = Faker::Date.backward(rand(200))
  duedate = date + 7 + rand(9)
  in_out = 1 # входящее
  in_out = 2 if rand(5) == 1
  status = [0, 5, 10, 10, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90][rand(15)]
  regnumber = nil
  regdate = nil
  if in_out == 2
    letter_id = Letter.pluck(:id).sample if status == 90 && rand(5).zero?
    max_reg_number = Letter.where('in_out = 2').maximum(:regnumber).to_i
    regnumber = max_reg_number + 1 # next registration number for current year and directiom
    regdate = Faker::Date.backward(rand(200))
  end
  sender = "#{Faker::Company.suffix} #{Faker::Company.name}" unless rand(5).zero? # new sender
  Letter.create!(
    number: number,
    date: date,
    subject: Faker::Lorem.sentence(4),
    status: status,
    source: %w[курьер почта email портал][rand(4)],
    sender: sender,
    duedate: duedate,
    author_id: User.pluck(:id).sample,
    in_out: in_out,
    regnumber: regnumber,
    regdate: regdate,
    letter_id: letter_id,
    body: Faker::Lorem.sentence
  )
  letter = Letter.last
  if status.positive?
    create_user_letter(letter.id)
    create_user_letter(letter.id) if rand(3) == 1
    letter.status = status
  end
  user_id = User.pluck(:id).sample
  user = User.find(user_id) || User.first
  case status
  when 10 # на исполнении
    create_user_letter(letter.id, user.id)
    letter.result = "\r\n" + Time.current.strftime('%d.%m.%Y %H:%M:%S') + ": #{user.displayname} - " + Faker::Lorem.sentence
  when 90 # завершено
    letter.completion_date = letter.duedate - rand(10) if rand(5) == 1
    letter.completion_date = letter.duedate + rand(10) if rand(3) == 1
    # rubocop:disable Metrics/LineLength
    letter.result = "\r\n" + Time.current.strftime('%d.%m.%Y %H:%M:%S') + ": #{user.displayname} - " + Faker::Lorem.sentence
    letter.result += "\r\n" + Time.current.strftime('%d.%m.%Y %H:%M:%S') + ": #{user.displayname} считает, что все работы по письму исполнены"
    # rubocop:enable Metrics/LineLength
  end
  letter.save
end
puts 'Letters created'

# requirements
def create_user_requirement(requirement_id, user_id = nil)
  user_id ||= User.pluck(:id).sample
  UserRequirement.create(
    user_id: user_id,
    requirement_id: requirement_id,
    status: rand(2)
  )
end

Array.new(20) do |_l|
  date = Faker::Date.backward(rand(200))
  duedate = date + 7 + rand(9)
  status = [0, 5, 9, 15, 15, 15, 15, 15, 15, 90, 90, 90, 90, 90, 90][rand(15)]
  if rand(7) == 1
    letter_id = Letter.pluck(:id).sample
    source = nil
  else
    letter_id = nil
    source = Faker::Lorem.words(rand(1..6)).join(' ')
  end
  Requirement.create!(
    label: Faker::Lorem.words(rand(2..7)).join(' '),
    date: date,
    duedate: duedate,
    status: status,
    source: source,
    body: Faker::Lorem.sentences.join(''),
    author_id: User.pluck(:id).sample,
    letter_id: letter_id
  )
  requirement = Requirement.last
  if status.positive?
    create_user_requirement(requirement.id)
    create_user_requirement(requirement.id) if rand(3) == 1
    requirement.status = status
    requirement.result = Faker::Lorem.paragraph(rand(3))
  end
  requirement.save
end
puts 'Requirements created'
# tasks
def create_user_task(task_id, user_id = nil)
  user_id ||= User.pluck(:id).sample
  UserTask.create(user_id: user_id, task_id: task_id, status: rand(2))
end

Array.new(100) do |_l|
  date = Faker::Date.backward(rand(200))
  duedate = date + 7 + rand(9)
  completion_date = date + rand(30)
  status = [0, 5, 20, 50, 50, 50, 50, 50, 90, 90, 90, 90, 90, 90, 90][rand(15)]
  if rand(5) == 1
    letter_id = Letter.pluck(:id).sample
    requirement_id = nil
  else
    letter_id = nil
    requirement_id = (Requirement.pluck(:id).sample if rand(5) == 1)
  end
  task = Task.create(
    name: Faker::Lorem.words(rand(2..7)).join(' '),
    created_at: date,
    duedate: duedate,
    completion_date: completion_date,
    status: status,
    description: Faker::Lorem.sentences.join(''),
    author_id: User.pluck(:id).sample,
    letter_id: letter_id,
    requirement_id: requirement_id
  )
  if status.positive?
    create_user_task(task.id)
    create_user_task(task.id) if rand(3) == 1
    task.status = status
    task.result = Faker::Lorem.paragraph(rand(3))
  end
  task.save
end
puts 'Tasks created'

# applications
%w[Office Notepad Excel Word Powerpoint].each do |name|
  Bapp.create(name: name,
              description: 'Microsoft ' + name + ' 2003',
              apptype: 'MS',
              purpose: 'редактирование ' + name)
end
%w[Calc Writer Impress Base].each do |name|
  Bapp.create(name: name,
              description: 'LibreOffice ' + name + ' 6.0',
              apptype: 'LO',
              purpose: 'работа в ' + name)
end
%w[Gimp Notepad SublimeText].each do |name|
  Bapp.create(name: name,
              apptype: 'офис',
              purpose: name)
end
Bapp.create(name: '1С:Бухгалтерия', description: '1С:Бухгалтерия. Учет основных средств', apptype: 'бух')
Bapp.create(name: '1С:Бухгалтерия.Склад', description: '1С:Бухгалтерия. Учет склада', apptype: 'бух')
Bapp.create(name: '1С:Бухгалтерия.Кадры', description: '1С:Бухгалтерия. Учет кадров', apptype: 'бух')
15.times do |_bapp|
  BproceBapp.create!(
    bproce_id: Bproce.pluck(:id).sample,
    bapp_id: Bapp.pluck(:id).sample,
    apurpose: Faker::Lorem.sentence(1)
  )
end
puts 'applications created'
# rubocop:enable Rails/Output
# rubocop:enable Metrics/BlockLength
