- title "Письмо № #{@letter.number} от #{@letter.date.strftime('%d.%m.%Y')}"
- search 'Письмо'
%table
  %tr
    %td
      %h3
        - if @letter.in_out > 1
          %div.h2{style: 'display: inline; color: #eee; background-color: #000;'}
            #{LETTER_DIRECTION.key(@letter.in_out)}:
        - else
          #{LETTER_DIRECTION.key(@letter.in_out)}:
      %h3
        %br
        - if @letter.in_out != 1 # Исходящее
          Исх.№
          - if @letter.regnumber.blank?
            - if can? :registr, @letter
              = link_to 'Зарегистрировать', register_letter_path(@letter), class: 'button'
          - else
            %b #{@letter.regnumber}
            - if @letter.regdate
              от
              %b
                = link_to @letter.regdate.strftime('%d.%m.%Y'), letters_path(regdate: @letter.regdate.strftime('%d.%m.%Y'))

        - if @letter_link
          %br
          ответ на
          = link_to "Вх.№ #{@letter_link.number}", letter_path(@letter_link)
          от #{@letter_link.date.strftime('%d.%m.%Y')}
        - else
          Исх.№ #{@letter.number} от
          = link_to @letter.date.strftime('%d.%m.%Y'), letters_path(date: @letter.date.strftime('%d.%m.%Y')) if @letter.date
  
        - if @letter.in_out == 1 # Входящее
          - if @letter.regnumber.blank?
            %h2
              Отметки банка
              - if can? :registr, @letter
                = link_to 'Зарегистрировать', register_letter_path(@letter), class: 'button'
          - else
            %br
              Зарегистрирован:
              = @letter.in_out == 1 ? 'Вх.№' : 'Исх.№'
              %b "#{@letter.regnumber}"
              - if @letter.regdate
                от
                %b
                  = link_to @letter.regdate.strftime('%d.%m.%Y'), letters_path(regdate: @letter.regdate.strftime('%d.%m.%Y'))
    %td
      %h2
        - if @letter.in_out == 1
          Отправитель:
        - else
          Получатель:
        %br
        = link_to @letter.sender, letters_path(addresse: @letter.sender)
    %td
      .id_ ##{@letter.id}

  %tr
    %td
      %h2
        %b [ #{@letter.subject} ]
    %td
      \&nbsp;
  %tr
    %td
      %h3 Краткое содержание (о чем):
      = simple_format(@letter.body, {}, {})
    %td
      %h3 Источник: #{@letter.source}
%h3
  Срок исполнения:
  - if @letter.duedate
    %b= @letter.duedate.strftime('%d.%m.%Y')
    - if @letter.status < 90
      - days = @letter.duedate - Date.current
      = " (осталось #{days.to_i} дн.)" if days > 0
      - if days <= 0
        %span{ style: 'color: red;' }
          = " (опоздание #{(-days).to_i} дн.)" if days < 0
          = " сегодня!" if days == 0
  - if @letter.completion_date
    [ фактически:
    %b= @letter.completion_date.strftime('%d.%m.%Y')

    - if @letter.status >= 90
      - days = 0
      - days = @letter.completion_date - @letter.duedate if @letter.duedate
      - if days > 0
        %span{ style: 'color: red;' }
          = " (опоздание #{days.to_i} дн.)"
    ]

%h4 Файлы приложений к письму:
- @letter.letter_appendix.each do |letter_appendix|
  - if File.exist?(letter_appendix.appendix.path) # есть исходный файл документа
    = link_to image_tag('action_go.gif', alt: 'См.', title: 'Смотреть'), letter_appendix.appendix.url # , class: 'button-img'
    = link_to (letter_appendix.name.blank? ? letter_appendix.appendix_file_name.to_s : letter_appendix.name.to_s), letter_appendix.appendix.url
  - else
    = letter_appendix.name
  = " ( \"#{letter_appendix.appendix_file_name}\": #{letter_appendix.appendix_updated_at.strftime('%d.%m.%Y %H:%M:%S')}  #{letter_appendix.appendix_file_size})"
  %br
- if can? :update, @letter
  #appendix_update
    = link_to 'Добавить файл приложения', appendix_create_letter_path(@letter), remote: true

%hr

%h3
  - if @letter.author_id?
    Автор:
    = link_to @letter.author.displayname, user_path(@letter.author.id)
    &nbsp; &nbsp;
  Исполнители:
  - is_can_update = can? :update, @letter
  - is_can_update = true if @letter.author && @letter.author.id == current_user.id # автор может добавлять других исполнителей
  - @letter.user_letter.each do |user_letter|
    = link_to user_letter.user.displayname, letters_path(user: user_letter.user)
    &nbsp;
    - if user_letter.status && user_letter.status > 0
      \- отв.
    &nbsp;
    - is_can_update = true if user_letter.user.id == current_user.id # исполнители могут добавлять других исполнителей

- if is_can_update # автор и исполнители могут добавлять других исполнителей
  #create_user
    = link_to 'Добавить Исполнителя', create_user_letter_path(@letter), remote: true

%h3
  Статус:
  %b= LETTER_STATUS.key(@letter.status)
%h3 Результат исполнения:
= simple_format(@letter.result, {}, {})

%hr
= render 'letters_outgoing' if @letters_outgoing.any?
- if @requirements.any?
  %h4 Созданы Требования:
  - @requirements.each do |requirement|
    = link_to "Требование [#{requirement.label}]", requirement
    от #{requirement.date.strftime('%d.%m.%Y')}
    %br
= render 'tasks' if @tasks.any?

.info_
  - activity1 = PublicActivity::Activity.where(trackable_type: 'Letter', trackable_id: @letter.id).order('created_at asc').first
  - if activity1
    = link_to 'создал', activities_path(type: 'Letter', id: @letter.id)
    = activity1.updated_at.strftime('%d.%m.%Y %H:%M:%S')
    = activity1.owner.displayname.to_s
  - else
    создан
    = @letter.created_at.strftime('%d.%m.%Y %H:%M:%S')
  %br
  - activity2 = PublicActivity::Activity.where(trackable_type: 'Letter', trackable_id: @letter.id).order('created_at asc').last
  - if activity2
    = link_to 'изменил', activities_path(type: 'Letter', id: @letter.id)
    = activity2.updated_at.strftime('%d.%m.%Y %H:%M:%S')
    = activity2.owner.displayname.to_s
  - else
    изменен
    = @letter.updated_at.strftime('%d.%m.%Y %H:%M:%S')
%p
- if @letter.in_out == 1
  = link_to 'Back', letters_path, class: 'button'
- else
  = link_to 'Back', letters_path(out: 1), class: 'button'

- if is_can_update # автор и исполнители могут изменять письмо
  = link_to 'Edit', edit_letter_path(@letter), class: 'button'
  - if can? :create_outgoing, @letter
    = link_to 'Новое похожее', clone_letter_path(@letter), class: 'button'
    = link_to 'Создать Исходящее', create_outgoing_letter_path(@letter), class: 'button' if @letter.in_out == 1
  = link_to '+Задачу', create_task_letter_path(@letter), class: 'button'
  = link_to '+Требование', create_requirement_letter_path(@letter), class: 'button'
  - if can? :create_outgoing, @letter
    = link_to 'Реестр выписок', reestr_letter_path(@letter), class: 'button'
