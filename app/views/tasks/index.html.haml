- search "Задачи"
- title @title_tasks
- command_params = Hash.new
- command_search = Hash.new

%section.hero.is-primary
  .hero-body
    .container
      %h1.title
        = @title_tasks if @title_tasks
        - if params[:search].present?
          [ #{params[:search]} ]
          - command_search = command_search.merge('search' => params[:search])
          - command_params = command_params.merge(command_search) # сохранить параметр для вызова Списка
        - command_params = command_params.merge('user' => params[:user]) if params[:user].present?
      %h2.subtitle
        %p.notice= notice
.container
  %table.table.is-striped.is-bordered.is-hoverable.is-fullwidth
    %thead
      %tr
        %th= sortable "id", "#"
        %thНаименование и Описание
        %thИсточник
        %th= sortable 'duedate', 'Срок'
        %th= sortable "status", "Статус"
        %thОтветственные
        %th
    - if @tasks.any?
      %tbody
        - @tasks.each do |task|
          %tr
            %td
              .id_show_ ##{task.id}
            %td
              = link_to task.name, task
              %br
              %small= task.description
            %td
              = link_to "Письмо #{task.letter_id}", letter_path(task.letter_id) if task.letter_id
              = link_to "Требование ##{task.requirement_id}", requirement_path(task.requirement_id) if task.requirement_id
            %td
              - if task.duedate
                = days_left_as_text task.duedate, task.status < 90 && task.duedate <= Date.current
                - if task.completion_date
                  %br= date_as_text task.completion_date, true if task.completion_date > task.duedate
            %td= TASK_STATUS.key(task.status)
            %td
              - task.user_task.each do |user_task|
                - if user_task.user
                  - s = "#{user_task.user.user3}<span>#{user_task.user.lastname[1,10]}</span>"
                  - s += "\u2713".html_safe if user_task.responsible?   # пометим ответственного
                  %user
                    = link_to raw(s), user_task.user
                - else
                  удалить ссылку
                  = user_task.inspect
            - if current_user.id == task.author.id or can? :manage, task or can? :destroy, task
              %td
                = link_to image_tag('page_edit.gif', alt: 'Изменить'), edit_task_path(task), class: 'button-img'
                = link_to image_tag('action_stop.gif', alt: 'Удалить'), task,
                data: { confirm: "Задача #{task.name}" + "\nДействительно хотите удалить?" },
                method: 'delete', class: 'button-img'
.container
  .apple_pagination
    = will_paginate @tasks
.container
  .columns
    .column
      - if can? :create, Task
        %a.button.is-warning{href: new_task_path} Новая задача
      %a.button.is-info{href: check_tasks_path} Контроль
    .column
      - params.delete :status if params[:reset].present?
      - Task.select("status, count(id) as count").group(:status).order(:status).each do |task|
        - if task&.status
          - if (params[:status].present? && task.status == params[:status].to_i)
            %a.button.is-info.is-outlined{ href: tasks_path(command_search.merge(status: task.status, reset: task.status)) } Сбросить #{TASK_STATUS.key(task.status)}
          - else
            %a.button.is-info.is-outlined{ href: tasks_path(command_search.merge(status: task.status)) } #{TASK_STATUS.key(task.status)} - #{task.count}
